# This file is auto-generated by _fetch_ops.py.

from cntk.graph import ComputationNode, InputComputationNodeBase, ImageInputComputationNodeBase

class Print(ComputationNode):
    def __init__(self, value, format='', name='Print', var_name=None):
        super(Print, self).__init__(params=['value', 'format'], name=name, var_name=var_name)
        self.value = value
        self.format = format
        self.params_with_defaults = ['format']

class Fail(ComputationNode):
    def __init__(self, what, name='Fail', var_name=None):
        super(Fail, self).__init__(params=['what'], name=name, var_name=var_name)
        self.what = what
        self.params_with_defaults = []

class Format(ComputationNode):
    def __init__(self, value, format, name='Format', var_name=None):
        super(Format, self).__init__(params=['value', 'format'], name=name, var_name=var_name)
        self.value = value
        self.format = format
        self.params_with_defaults = []

class Replace(ComputationNode):
    def __init__(self, s, from_, to, name='Replace', var_name=None):
        super(Replace, self).__init__(params=['s', 'from_', 'to'], name=name, var_name=var_name)
        self.s = s
        self.from_ = from_
        self.to = to
        self.params_with_defaults = []

class Substr(ComputationNode):
    def __init__(self, s, begin, num, name='Substr', var_name=None):
        super(Substr, self).__init__(params=['s', 'begin', 'num'], name=name, var_name=var_name)
        self.s = s
        self.begin = begin
        self.num = num
        self.params_with_defaults = []

class Chr(ComputationNode):
    def __init__(self, c, name='Chr', var_name=None):
        super(Chr, self).__init__(params=['c'], name=name, var_name=var_name)
        self.c = c
        self.params_with_defaults = []

class Length(ComputationNode):
    def __init__(self, x, name='Length', var_name=None):
        super(Length, self).__init__(params=['x'], name=name, var_name=var_name)
        self.x = x
        self.params_with_defaults = []

class Ceil(ComputationNode):
    def __init__(self, x, name='Ceil', var_name=None):
        super(Ceil, self).__init__(params=['x'], name=name, var_name=var_name)
        self.x = x
        self.params_with_defaults = []

class Round(ComputationNode):
    def __init__(self, x, name='Round', var_name=None):
        super(Round, self).__init__(params=['x'], name=name, var_name=var_name)
        self.x = x
        self.params_with_defaults = []

class Sign(ComputationNode):
    def __init__(self, x, name='Sign', var_name=None):
        super(Sign, self).__init__(params=['x'], name=name, var_name=var_name)
        self.x = x
        self.params_with_defaults = []

class Min(ComputationNode):
    def __init__(self, a, b, name='Min', var_name=None):
        super(Min, self).__init__(params=['a', 'b'], name=name, var_name=var_name)
        self.a = a
        self.b = b
        self.params_with_defaults = []

class Max(ComputationNode):
    def __init__(self, a, b, name='Max', var_name=None):
        super(Max, self).__init__(params=['a', 'b'], name=name, var_name=var_name)
        self.a = a
        self.b = b
        self.params_with_defaults = []

class Fac(ComputationNode):
    def __init__(self, n, name='Fac', var_name=None):
        super(Fac, self).__init__(params=['n'], name=name, var_name=var_name)
        self.n = n
        self.params_with_defaults = []

class IsSameObject(ComputationNode):
    def __init__(self, a, b, name='IsSameObject', var_name=None):
        super(IsSameObject, self).__init__(params=['a', 'b'], name=name, var_name=var_name)
        self.a = a
        self.b = b
        self.params_with_defaults = []

class LearnableParameter(ComputationNode):
    def __init__(self, rows, cols, learningRateMultiplier=1.0, init='uniform', initValueScale=1, value=0, initFromFilePath='', initFromLiteral='', initOnCPUOnly=True, randomSeed=-1, name='LearnableParameter', var_name=None):
        super(LearnableParameter, self).__init__(params=['rows', 'cols', 'learningRateMultiplier', 'init', 'initValueScale', 'value', 'initFromFilePath', 'initFromLiteral', 'initOnCPUOnly', 'randomSeed'], name=name, var_name=var_name)
        self.rows = rows
        self.cols = cols
        self.learningRateMultiplier = learningRateMultiplier
        self.init = init
        self.initValueScale = initValueScale
        self.value = value
        self.initFromFilePath = initFromFilePath
        self.initFromLiteral = initFromLiteral
        self.initOnCPUOnly = initOnCPUOnly
        self.randomSeed = randomSeed
        self.params_with_defaults = ['learningRateMultiplier', 'init', 'initValueScale', 'value', 'initFromFilePath', 'initFromLiteral', 'initOnCPUOnly', 'randomSeed']

Parameter = LearnableParameter
