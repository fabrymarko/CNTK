=== Running /cygdrive/c/Users/mahilleb/Repos/CNTK/x64/release_CpuOnly/cntk.exe configFile=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 20 2016 23:18:35
		Last modified date: Wed Apr 13 18:18:25 2016
		Build type: Release
		Build target: CPU-only
		With 1bit-SGD: no
		Build Branch: master
		Build SHA1: bbeabe7b0297e90da1e7696ccca13802c118413c (modified)
		Built by mahilleb on mahilleb51
		Build Path: C:\Users\mahilleb\Repos\CNTK\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
04/20/2016 22:45:00: -------------------------------------------------------------------
04/20/2016 22:45:00: Build info: 

04/20/2016 22:45:00: 		Built time: Apr 20 2016 23:18:35
04/20/2016 22:45:00: 		Last modified date: Wed Apr 13 18:18:25 2016
04/20/2016 22:45:00: 		Build type: Release
04/20/2016 22:45:00: 		Build target: CPU-only
04/20/2016 22:45:00: 		With 1bit-SGD: no
04/20/2016 22:45:00: 		Build Branch: master
04/20/2016 22:45:00: 		Build SHA1: bbeabe7b0297e90da1e7696ccca13802c118413c (modified)
04/20/2016 22:45:00: 		Built by mahilleb on mahilleb51
04/20/2016 22:45:00: 		Build Path: C:\Users\mahilleb\Repos\CNTK\Source\CNTK\
04/20/2016 22:45:00: -------------------------------------------------------------------

04/20/2016 22:45:00: Running on mahilleb51 at 2016/04/20 22:45:00
04/20/2016 22:45:00: Command line: 
C:\Users\mahilleb\Repos\CNTK\x64\release_CpuOnly\cntk.exe  configFile=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk  currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data  RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu  DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E  OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu  DeviceId=-1  timestamping=true



04/20/2016 22:45:00: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/20/2016 22:45:00: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

04/20/2016 22:45:00: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/20/2016 22:45:00: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/20/2016 22:45:00: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

04/20/2016 22:45:00: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/20/2016 22:45:00: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:firstMBsToShowResult=4
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
04/20/2016 22:45:00: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/20/2016 22:45:00: Commands: speechTrain
04/20/2016 22:45:00: Precision = "float"
04/20/2016 22:45:00: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn
04/20/2016 22:45:00: CNTKCommandTrainInfo: speechTrain : 3
04/20/2016 22:45:00: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/20/2016 22:45:00: ##############################################################################
04/20/2016 22:45:00: #                                                                            #
04/20/2016 22:45:00: # Action "train"                                                             #
04/20/2016 22:45:00: #                                                                            #
04/20/2016 22:45:00: ##############################################################################

04/20/2016 22:45:00: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/20/2016 22:45:00: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/20/2016 22:45:00: Created model with 25 nodes on CPU.

04/20/2016 22:45:00: Training criterion node(s):
04/20/2016 22:45:00: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/20/2016 22:45:00: Evaluation criterion node(s):

04/20/2016 22:45:00: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

04/20/2016 22:45:00: Precomputing --> 3 PreCompute nodes found.

04/20/2016 22:45:00: 	MeanOfFeatures = Mean()
04/20/2016 22:45:00: 	InvStdOfFeatures = InvStdDev()
04/20/2016 22:45:00: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/20/2016 22:45:01: Precomputing --> Completed.


04/20/2016 22:45:01: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

04/20/2016 22:45:01: Starting minibatch loop.
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[   1-   1, 0.31%]: SamplesSeen = 64; TrainLossPerSample =  4.88430882; EvalErr[0]PerSample = 0.98437500; TotalTime = 0.0194s; SamplesPerSecond = 3297.9
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[   2-   2, 0.63%]: SamplesSeen = 64; TrainLossPerSample =  4.71236610; EvalErr[0]PerSample = 0.95312500; TotalTime = 0.0109s; SamplesPerSecond = 5847.4
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[   3-   3, 0.94%]: SamplesSeen = 64; TrainLossPerSample =  4.23005009; EvalErr[0]PerSample = 0.92187500; TotalTime = 0.0112s; SamplesPerSecond = 5723.5
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[   4-   4, 1.25%]: SamplesSeen = 64; TrainLossPerSample =  4.65200233; EvalErr[0]PerSample = 0.85937500; TotalTime = 0.0110s; SamplesPerSecond = 5815.5
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[   5-  10, 3.13%]: SamplesSeen = 384; TrainLossPerSample =  4.36929353; EvalErr[0]PerSample = 0.89322917; TotalTime = 0.0741s; SamplesPerSecond = 5179.7
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: SamplesSeen = 640; TrainLossPerSample =  4.22300034; EvalErr[0]PerSample = 0.90156250; TotalTime = 0.2819s; SamplesPerSecond = 2270.1
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: SamplesSeen = 640; TrainLossPerSample =  3.93971329; EvalErr[0]PerSample = 0.84687500; TotalTime = 0.1358s; SamplesPerSecond = 4711.2
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: SamplesSeen = 640; TrainLossPerSample =  3.92341614; EvalErr[0]PerSample = 0.90468750; TotalTime = 0.1280s; SamplesPerSecond = 5000.5
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: SamplesSeen = 640; TrainLossPerSample =  3.84074249; EvalErr[0]PerSample = 0.91093750; TotalTime = 0.1194s; SamplesPerSecond = 5359.1
04/20/2016 22:45:02:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: SamplesSeen = 640; TrainLossPerSample =  3.71251984; EvalErr[0]PerSample = 0.88437500; TotalTime = 0.1219s; SamplesPerSecond = 5248.2
04/20/2016 22:45:03:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: SamplesSeen = 640; TrainLossPerSample =  3.51563110; EvalErr[0]PerSample = 0.82500000; TotalTime = 0.1198s; SamplesPerSecond = 5341.2
04/20/2016 22:45:03:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: SamplesSeen = 640; TrainLossPerSample =  3.49348450; EvalErr[0]PerSample = 0.81093750; TotalTime = 0.1250s; SamplesPerSecond = 5119.2
04/20/2016 22:45:03:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: SamplesSeen = 640; TrainLossPerSample =  3.34739685; EvalErr[0]PerSample = 0.76562500; TotalTime = 0.1181s; SamplesPerSecond = 5418.8
04/20/2016 22:45:03:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: SamplesSeen = 640; TrainLossPerSample =  3.51961060; EvalErr[0]PerSample = 0.79843750; TotalTime = 0.1185s; SamplesPerSecond = 5400.9
04/20/2016 22:45:03:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: SamplesSeen = 640; TrainLossPerSample =  3.24656067; EvalErr[0]PerSample = 0.80312500; TotalTime = 0.1234s; SamplesPerSecond = 5187.1
04/20/2016 22:45:03:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: SamplesSeen = 640; TrainLossPerSample =  3.33397217; EvalErr[0]PerSample = 0.80000000; TotalTime = 0.1259s; SamplesPerSecond = 5084.2
04/20/2016 22:45:03:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: SamplesSeen = 640; TrainLossPerSample =  3.17780762; EvalErr[0]PerSample = 0.77031250; TotalTime = 0.1165s; SamplesPerSecond = 5491.7
04/20/2016 22:45:03:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: SamplesSeen = 640; TrainLossPerSample =  3.09845886; EvalErr[0]PerSample = 0.76875000; TotalTime = 0.1242s; SamplesPerSecond = 5154.4
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: SamplesSeen = 640; TrainLossPerSample =  3.06457214; EvalErr[0]PerSample = 0.72968750; TotalTime = 0.1175s; SamplesPerSecond = 5446.3
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: SamplesSeen = 640; TrainLossPerSample =  2.91632080; EvalErr[0]PerSample = 0.69531250; TotalTime = 0.1188s; SamplesPerSecond = 5388.0
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: SamplesSeen = 640; TrainLossPerSample =  2.90608521; EvalErr[0]PerSample = 0.73281250; TotalTime = 0.1201s; SamplesPerSecond = 5331.0
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: SamplesSeen = 640; TrainLossPerSample =  2.74095459; EvalErr[0]PerSample = 0.65937500; TotalTime = 0.1226s; SamplesPerSecond = 5219.8
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: SamplesSeen = 640; TrainLossPerSample =  2.67088013; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.1182s; SamplesPerSecond = 5414.0
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: SamplesSeen = 640; TrainLossPerSample =  2.67608643; EvalErr[0]PerSample = 0.66406250; TotalTime = 0.1253s; SamplesPerSecond = 5106.0
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: SamplesSeen = 640; TrainLossPerSample =  2.54733276; EvalErr[0]PerSample = 0.62968750; TotalTime = 0.1166s; SamplesPerSecond = 5487.2
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: SamplesSeen = 640; TrainLossPerSample =  2.61925659; EvalErr[0]PerSample = 0.67343750; TotalTime = 0.1166s; SamplesPerSecond = 5486.5
04/20/2016 22:45:04:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: SamplesSeen = 640; TrainLossPerSample =  2.52387695; EvalErr[0]PerSample = 0.65781250; TotalTime = 0.1226s; SamplesPerSecond = 5219.4
04/20/2016 22:45:05:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: SamplesSeen = 640; TrainLossPerSample =  2.47543945; EvalErr[0]PerSample = 0.63437500; TotalTime = 0.1172s; SamplesPerSecond = 5458.8
04/20/2016 22:45:05:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: SamplesSeen = 640; TrainLossPerSample =  2.43265381; EvalErr[0]PerSample = 0.61406250; TotalTime = 0.1209s; SamplesPerSecond = 5292.5
04/20/2016 22:45:05:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: SamplesSeen = 640; TrainLossPerSample =  2.41727905; EvalErr[0]PerSample = 0.63125000; TotalTime = 0.1157s; SamplesPerSecond = 5531.2
04/20/2016 22:45:05:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: SamplesSeen = 640; TrainLossPerSample =  2.17673950; EvalErr[0]PerSample = 0.57812500; TotalTime = 0.1181s; SamplesPerSecond = 5418.7
04/20/2016 22:45:05:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: SamplesSeen = 640; TrainLossPerSample =  2.31020508; EvalErr[0]PerSample = 0.64062500; TotalTime = 0.1173s; SamplesPerSecond = 5454.5
04/20/2016 22:45:05:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: SamplesSeen = 640; TrainLossPerSample =  2.26400757; EvalErr[0]PerSample = 0.61093750; TotalTime = 0.1219s; SamplesPerSecond = 5251.1
04/20/2016 22:45:05:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: SamplesSeen = 640; TrainLossPerSample =  2.15885010; EvalErr[0]PerSample = 0.58281250; TotalTime = 0.1168s; SamplesPerSecond = 5480.3
04/20/2016 22:45:05:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: SamplesSeen = 640; TrainLossPerSample =  2.22711792; EvalErr[0]PerSample = 0.59218750; TotalTime = 0.1186s; SamplesPerSecond = 5396.2
04/20/2016 22:45:06:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: SamplesSeen = 640; TrainLossPerSample =  2.25604858; EvalErr[0]PerSample = 0.60625000; TotalTime = 0.1218s; SamplesPerSecond = 5256.1
04/20/2016 22:45:06: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 3.0070459; TotalSamplesSeen = 20480; EvalErrPerSample = 0.72827148; AvgLearningRatePerSample = 0.015625; EpochTime=4.0667
04/20/2016 22:45:06: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.1'

04/20/2016 22:45:06: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

04/20/2016 22:45:06: Starting minibatch loop.
04/20/2016 22:45:06:  Epoch[ 2 of 3]-Minibatch[   1-   1, 1.25%]: SamplesSeen = 256; TrainLossPerSample =  2.15584278; EvalErr[0]PerSample = 0.56640625; TotalTime = 0.0381s; SamplesPerSecond = 6720.7
04/20/2016 22:45:06:  Epoch[ 2 of 3]-Minibatch[   2-   2, 2.50%]: SamplesSeen = 256; TrainLossPerSample =  2.21105957; EvalErr[0]PerSample = 0.59375000; TotalTime = 0.0412s; SamplesPerSecond = 6215.9
04/20/2016 22:45:06:  Epoch[ 2 of 3]-Minibatch[   3-   3, 3.75%]: SamplesSeen = 256; TrainLossPerSample =  2.03951550; EvalErr[0]PerSample = 0.54687500; TotalTime = 0.0366s; SamplesPerSecond = 6993.8
04/20/2016 22:45:06:  Epoch[ 2 of 3]-Minibatch[   4-   4, 5.00%]: SamplesSeen = 256; TrainLossPerSample =  2.05401421; EvalErr[0]PerSample = 0.53906250; TotalTime = 0.0392s; SamplesPerSecond = 6524.0
04/20/2016 22:45:06:  Epoch[ 2 of 3]-Minibatch[   5-  10, 12.50%]: SamplesSeen = 1536; TrainLossPerSample =  2.09421984; EvalErr[0]PerSample = 0.56705729; TotalTime = 0.2289s; SamplesPerSecond = 6709.3
04/20/2016 22:45:06:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: SamplesSeen = 2560; TrainLossPerSample =  2.00548573; EvalErr[0]PerSample = 0.54843750; TotalTime = 0.3863s; SamplesPerSecond = 6626.4
04/20/2016 22:45:07:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: SamplesSeen = 2560; TrainLossPerSample =  2.00766983; EvalErr[0]PerSample = 0.54960937; TotalTime = 0.4587s; SamplesPerSecond = 5580.7
04/20/2016 22:45:07:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.92049370; EvalErr[0]PerSample = 0.53281250; TotalTime = 0.3861s; SamplesPerSecond = 6631.0
04/20/2016 22:45:08:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.90178452; EvalErr[0]PerSample = 0.52265625; TotalTime = 0.3873s; SamplesPerSecond = 6610.5
04/20/2016 22:45:08:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.91359482; EvalErr[0]PerSample = 0.53984375; TotalTime = 0.3866s; SamplesPerSecond = 6621.9
04/20/2016 22:45:08:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: SamplesSeen = 2560; TrainLossPerSample =  1.91765289; EvalErr[0]PerSample = 0.53125000; TotalTime = 0.3933s; SamplesPerSecond = 6509.8
04/20/2016 22:45:09:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: SamplesSeen = 2560; TrainLossPerSample =  1.87682800; EvalErr[0]PerSample = 0.52890625; TotalTime = 0.4087s; SamplesPerSecond = 6263.9
04/20/2016 22:45:09: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 1.9557606; TotalSamplesSeen = 40960; EvalErrPerSample = 0.53979492; AvgLearningRatePerSample = 0.001953125; EpochTime=3.19966
04/20/2016 22:45:09: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.2'

04/20/2016 22:45:09: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

04/20/2016 22:45:09: Starting minibatch loop.
04/20/2016 22:45:09:  Epoch[ 3 of 3]-Minibatch[   1-   1, 5.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.85664034; EvalErr[0]PerSample = 0.52832031; TotalTime = 0.1658s; SamplesPerSecond = 6175.5
04/20/2016 22:45:09:  Epoch[ 3 of 3]-Minibatch[   2-   2, 10.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.88149643; EvalErr[0]PerSample = 0.52050781; TotalTime = 0.1473s; SamplesPerSecond = 6951.4
04/20/2016 22:45:09:  Epoch[ 3 of 3]-Minibatch[   3-   3, 15.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.88788319; EvalErr[0]PerSample = 0.52636719; TotalTime = 0.1483s; SamplesPerSecond = 6905.1
04/20/2016 22:45:10:  Epoch[ 3 of 3]-Minibatch[   4-   4, 20.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.82882071; EvalErr[0]PerSample = 0.52441406; TotalTime = 0.1723s; SamplesPerSecond = 5944.6
04/20/2016 22:45:11:  Epoch[ 3 of 3]-Minibatch[   5-  10, 50.00%]: SamplesSeen = 6144; TrainLossPerSample =  1.90075890; EvalErr[0]PerSample = 0.52555339; TotalTime = 1.3006s; SamplesPerSecond = 4724.1
04/20/2016 22:45:12:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.89384537; EvalErr[0]PerSample = 0.51816406; TotalTime = 1.4966s; SamplesPerSecond = 6842.2
04/20/2016 22:45:12: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.8898924; TotalSamplesSeen = 61440; EvalErrPerSample = 0.52172852; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=3.44136
04/20/2016 22:45:12: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn'
04/20/2016 22:45:13: CNTKCommandTrainEnd: speechTrain

04/20/2016 22:45:13: Action "train" complete.

04/20/2016 22:45:13: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /cygdrive/c/Users/mahilleb/Repos/CNTK/x64/release_CpuOnly/cntk.exe configFile=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu DeviceId=-1 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 20 2016 23:18:35
		Last modified date: Wed Apr 13 18:18:25 2016
		Build type: Release
		Build target: CPU-only
		With 1bit-SGD: no
		Build Branch: master
		Build SHA1: bbeabe7b0297e90da1e7696ccca13802c118413c (modified)
		Built by mahilleb on mahilleb51
		Build Path: C:\Users\mahilleb\Repos\CNTK\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
04/20/2016 22:45:13: -------------------------------------------------------------------
04/20/2016 22:45:13: Build info: 

04/20/2016 22:45:13: 		Built time: Apr 20 2016 23:18:35
04/20/2016 22:45:13: 		Last modified date: Wed Apr 13 18:18:25 2016
04/20/2016 22:45:13: 		Build type: Release
04/20/2016 22:45:13: 		Build target: CPU-only
04/20/2016 22:45:13: 		With 1bit-SGD: no
04/20/2016 22:45:13: 		Build Branch: master
04/20/2016 22:45:13: 		Build SHA1: bbeabe7b0297e90da1e7696ccca13802c118413c (modified)
04/20/2016 22:45:13: 		Built by mahilleb on mahilleb51
04/20/2016 22:45:13: 		Build Path: C:\Users\mahilleb\Repos\CNTK\Source\CNTK\
04/20/2016 22:45:13: -------------------------------------------------------------------

04/20/2016 22:45:13: Running on mahilleb51 at 2016/04/20 22:45:13
04/20/2016 22:45:13: Command line: 
C:\Users\mahilleb\Repos\CNTK\x64\release_CpuOnly\cntk.exe  configFile=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E/cntk.cntk  currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data  RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu  DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E  OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu  DeviceId=-1  timestamping=true  makeMode=true



04/20/2016 22:45:13: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/20/2016 22:45:13: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

04/20/2016 22:45:13: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/20/2016 22:45:13: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/20/2016 22:45:13: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
makeMode = false
firstMBsToShowResult = 4
speechTrain = [
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E
OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

04/20/2016 22:45:13: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/20/2016 22:45:13: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain
configparameters: cntk.cntk:ConfigDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\QuickE2E
configparameters: cntk.cntk:currentDirectory=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:firstMBsToShowResult=4
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:OutputDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    BrainScriptNetworkBuilder = [    // the same as above but with BS. Currently not used. Enable by removing the SimpleNetworkBuilder above.
        // note: this does not produce identical results because of different initialization order of random-initialized LearnableParameters
        layerSizes=363:512:512:132  // [0..]
        trainingCriterion=CrossEntropyWithSoftmax
        evalCriterion=ErrorPrediction
        layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
        applyMeanVarNorm=true
        initValueScale=1.0
        uniformInit=true
        BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
        GBFF(f, in, rows, cols) = [ Eh = rows,f(BFF(in, rows, cols).z) ]
        L = Length(layerSizes)-1    // number of model layers
        features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
        featNorm = if applyMeanVarNorm
                   then MeanVarNorm(features)
                   else features
        layers[layer:1..L-1] = if layer > 1
                               then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
                               else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
        outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
        outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
        CE = trainingCriterion(labels, outZ, tag='criterion')
        Err = evalCriterion(labels, outZ, tag='evaluation')
        logPrior = LogPrior(labels)
        // TODO: how to add a tag to an infix operation?
        ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024:
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
04/20/2016 22:45:13: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/20/2016 22:45:13: Commands: speechTrain
04/20/2016 22:45:13: Precision = "float"
04/20/2016 22:45:13: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn
04/20/2016 22:45:13: CNTKCommandTrainInfo: speechTrain : 3
04/20/2016 22:45:13: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/20/2016 22:45:13: ##############################################################################
04/20/2016 22:45:13: #                                                                            #
04/20/2016 22:45:13: # Action "train"                                                             #
04/20/2016 22:45:13: #                                                                            #
04/20/2016 22:45:13: ##############################################################################

04/20/2016 22:45:13: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\Users\mahilleb\Repos\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames

04/20/2016 22:45:13: Starting from checkpoint. Loading network from 'C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn.2'.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/20/2016 22:45:13: Loaded model with 25 nodes on CPU.

04/20/2016 22:45:13: Training criterion node(s):
04/20/2016 22:45:13: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/20/2016 22:45:13: Evaluation criterion node(s):

04/20/2016 22:45:13: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/20/2016 22:45:13: No PreCompute nodes found, skipping PreCompute step.

04/20/2016 22:45:13: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

04/20/2016 22:45:13: Starting minibatch loop.
04/20/2016 22:45:13:  Epoch[ 3 of 3]-Minibatch[   1-   1, 5.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.85664034; EvalErr[0]PerSample = 0.52832031; TotalTime = 0.1602s; SamplesPerSecond = 6390.2
04/20/2016 22:45:13:  Epoch[ 3 of 3]-Minibatch[   2-   2, 10.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.88149643; EvalErr[0]PerSample = 0.52050781; TotalTime = 0.1478s; SamplesPerSecond = 6928.1
04/20/2016 22:45:14:  Epoch[ 3 of 3]-Minibatch[   3-   3, 15.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.88788319; EvalErr[0]PerSample = 0.52636719; TotalTime = 0.1503s; SamplesPerSecond = 6812.6
04/20/2016 22:45:14:  Epoch[ 3 of 3]-Minibatch[   4-   4, 20.00%]: SamplesSeen = 1024; TrainLossPerSample =  1.82882071; EvalErr[0]PerSample = 0.52441406; TotalTime = 0.1482s; SamplesPerSecond = 6910.9
04/20/2016 22:45:15:  Epoch[ 3 of 3]-Minibatch[   5-  10, 50.00%]: SamplesSeen = 6144; TrainLossPerSample =  1.90075890; EvalErr[0]PerSample = 0.52555339; TotalTime = 0.9637s; SamplesPerSecond = 6375.4
04/20/2016 22:45:16:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: SamplesSeen = 10240; TrainLossPerSample =  1.89384537; EvalErr[0]PerSample = 0.51816406; TotalTime = 1.4466s; SamplesPerSecond = 7078.7
04/20/2016 22:45:16: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 1.8898924; TotalSamplesSeen = 61440; EvalErrPerSample = 0.52172852; AvgLearningRatePerSample = 9.7656251e-005; EpochTime=3.18909
04/20/2016 22:45:16: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160420234459.862336\Speech_QuickE2E@release_cpu/models/cntkSpeech.dnn'
04/20/2016 22:45:16: CNTKCommandTrainEnd: speechTrain

04/20/2016 22:45:16: Action "train" complete.

04/20/2016 22:45:16: __COMPLETED__
